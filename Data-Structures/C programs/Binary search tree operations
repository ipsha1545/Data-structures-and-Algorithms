//Binary search tree

#include<stdio.h>
#include<stdlib.h>


struct node{
    int data;
    struct node* left;
    struct node* right;
};

//insert a value
/*node* insert(struct node* root, int data){
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = data;
    
    if(!newnode){
        printf("Memory error");
        return;
    }
    
    if(data < root->data){
        insert(root->left,data);
    }
    
    else if(data > root->data){
        insert(root->right,data);
    
    }
    
    else printf("Sorry!.. no duplicates allowed as binary tree is an ordered set");
    
}*/

void insert(struct node ** tree, int val)
{
    struct node *temp = NULL;
    if(!(*tree))
    {
        temp = (struct node *)malloc(sizeof(struct node));
        temp->left = temp->right = NULL;
        temp->data = val;
        *tree = temp;
        return;
    }

    if(val < (*tree)->data)
    {
        insert(&(*tree)->left, val);
    }
    else if(val > (*tree)->data)
    {
        insert(&(*tree)->right, val);
    }

}

void inorder(struct node* root){
    if(root){
    printf("%d ",root->data);
    inorder(root->left);
    inorder(root->right);
    }
}


//level order traversal
int heightmine(struct node* root){
    if(root == NULL) return 0;
    
    if(height(root->left)>height(root->right))
    {
     printf("%d",height(root->left + 1));
     return height(root->left + 1);
    }
    else printf("%d",height(root->right + 1));
    return height(root->right + 1);
    
}

//print given level i.e prints nodes at a given level
void printlevel(struct node* root,int level){
  if(root == NULL){
      return;
  }
   if(level == 1){
      printf("%d ",root->data);
  }
  else if(level>1){
      printlevel(root->left,level -1);
      printlevel(root->right,level -1);
  }
}

//level order traversl
void levelordertraversal(struct node* root){
    int i;
    int h = height(root);
    for(i = 1; i <=h;i++){
        printlevel(root,i);
    }
}

/* Function to line by line print level order traversal a tree*/
void printLevelOrder(struct node* root)
{
    int h = height(root);
    int i;
    for (i=1; i<=h; i++)
    {
        printGivenLevel(root, i);
        printf("\n");
    }
}
 
/* Print nodes at a given level */
void printGivenLevel(struct node* root, int level)
{
    if (root == NULL)
        return;
    if (level == 1)
        printf("%d ", root->data);
    else if (level > 1)
    {
        printGivenLevel(root->left, level-1);
        printGivenLevel(root->right, level-1);
    }
}

int height(struct node* node)
{
    if (node==NULL)
        return 0;
    else
    {
        /* compute the height of each subtree */
        int lheight = height(node->left);
        int rheight = height(node->right);
 
        /* use the larger one */
        if (lheight > rheight)
            return(lheight+1);
        else return(rheight+1);
    }
}

int main(){
    struct node* root = NULL;
    insert(&root,23);
    insert(&root,19);
    insert(&root,8);
    
   // inorder(root);
   // struct node *p = root;
    //inorder(p);
   //printGivenLevel(root,3);
   //printf("%d",height(root));
   printLevelOrder(root);
}



